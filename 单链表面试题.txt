
//合并两个有序链表 合并后仍然有序
PNode MergeTwoOrderedLists(PNode pHead1, PNode pHead2)
{
	PNode pTail = NULL;//指向新链表的最后一个结点 pTail->next去连接
	PNode newHead = NULL;//指向合并后链表第一个结点

	if (NULL == pHead1)
	{
		return pHead2;
	} 
	else if(NULL == pHead2)
	{
		return pHead1;
	}
	else
	{
		//确定头指针
		if ( pHead1->data < pHead2->data)
		{
			newHead = pHead1;
			pHead1 = pHead1->next;    //指向链表的第二个结点
		} 
		else
		{
			newHead = pHead2;
			pHead2 = pHead2->next;
		}
		pTail = newHead;    //指向第一个结点
		while ( pHead1 && pHead2)  
		{
			if ( pHead1->data <= pHead2->data )
			{
				pTail->next = pHead1;  
				pHead1 = pHead1->next;
			}
			else 
			{
				pTail->next = pHead2;
				pHead2 = pHead2->next;
			}
			pTail = pTail->next;
		}

		if(NULL == pHead1)
		{
			pTail->next = pHead2;
		}
		else if(NULL == pHead2)
		{
			pTail->next = pHead1;
		}
		return newHead;
}
//删除一个无头单链表的非尾结点
void DeleteNotTailNode(PNode pos)
{
	PNode del = NULL;
	if(NULL == pos || NULL == pos->next)
	{
		return;
	}
	del = pos->next;
	pos->data = del->data;
	pos->next = del->next;
	free(del);
	del = NULL;
}
//在无头单链表的一个非头节点前插入一个节点
void InsertNotHeadNode(PNode pos)
{
	PNode ins = NULL;
	int data;
	if (NULL == pos)
	{
		return;
	}
	printf("请输入要插入的值：");
	scanf("%d",&data);
	ins = NewNode(pos->data);
	ins->next = pos->next;
	pos->data = data;
	pos->next = ins;

}
//判断两个链表是否相交 假设不带环，若相交 求交点
int IsCross(PNode pHead1, PNode pHead2)
{
	if (NULL == pHead1 || NULL ==pHead2)
	{
		return 0;
	}
	while (pHead1->next)
	{
		pHead1 = pHead1->next;
	}
	while (pHead2->next)
	{
		pHead2 = pHead2->next;
	}
	if(pHead1 == pHead2)
	{
		return 1;
	}

	return 0;
}
//求交点
PNode GetCrossNode(PNode pHead1, PNode pHead2)
{
	int step = 0;
	int size1;
	int size2;
	if ( !IsCross(pHead1, pHead2) )
	{
		return NULL;
	}
	size1 = Size(pHead1);
	size2 = Size(pHead2);
	step = size1 - size2;
	if (step > 0)
	{
		while (step--)
		{
			pHead1 = pHead1->next;
		}
	}
	else if (step < 0)
	{
		while (step++)
		{
			pHead2 = pHead2->next;
		}
	}

	while(pHead1 && pHead2)
	{
		if (pHead1 == pHead2)
		{
			return pHead1;
		}
		pHead1 = pHead1->next;
		pHead2 = pHead2->next;
	}
	return NULL;
}

//判断是否带环
PNode HasCircle(PNode pHead)
{
	PNode fast = pHead;
	PNode slow = pHead;
	if (NULL == pHead)
	{
		return NULL;
	}
	//判断走得快的指针
	while (fast && fast->next)
	{
		slow = slow->next;
		fast = fast->next->next;
		if (slow == fast)
		{
			return fast;
		}
		
	}
	return NULL;
}
//求环的长度
int GetCircleLen(PNode pMeetNode)
{
	int count = 1;
	PNode curNode = pMeetNode;
	if (NULL == pMeetNode)
	{
		return 0;
	}

	while (curNode->next != pMeetNode )
	{
		curNode = curNode->next;
		count++;
	}
	return count;
}

//入口点
PNode GetEnterNode(PNode pHead, PNode pMeetNode) // 在邮件中给出推理
{
	PNode start = pHead;
	while ( start != pMeetNode )
	{
		start = start->next;
		pMeetNode = pMeetNode->next;
		if (start == pMeetNode)
		{
			return start;
		}
	}
	return NULL;
}
void UnionSet(PNode l1, PNode l2)
{
	PNode p1 = l1;
	PNode p2 = l2;
	if (NULL == l1 || NULL ==l2)
	{
		return;
	}
	while (p1 && p2)
	{
		if (p1->data == p2->data )
		{
			printf("%d\n",p1->data);
			while ( p1->next && p1->data == p1->next->data)
			{
				p1 = p1->next;
			}
			while (p2->next && p2->data == p2->next->data)
			{
				p2 = p2->next;
			}
			p1 = p1->next;
			p2 = p2->next;
		}
		else if (p1->data < p2->data)
		{
			p1 = p1->next;
		}
		else
		{
			p2 = p2->next;
		}
	}
}
//两个有环链表判断是否相交 返回交点
PNode IsCrossWithCircle(PNode pHead1, PNode pHead2)
{
	PNode crossNode = NULL;  //交点
	PNode enterNode1 = NULL;  //链表1的入口点
	PNode enterNode2 = NULL;  //链表2的入口点
	PNode meetNode1 = HasCircle(pHead1);  //链表1的相遇点
	PNode meetNode2 = HasCircle(pHead2);  //链表2的相遇点
	int sz = GetCircleLen(meetNode1);//链表1环的长度
	//判断是否带环
	if (NULL == meetNode1 || NULL== meetNode2)
	{
		return NULL;
	}
	
	//找到两个带环链表的入口点
	enterNode1 = GetEnterNode(pHead1, meetNode1);
	enterNode2 = GetEnterNode(pHead2, meetNode2);
	//分情况讨论 1.交点在环外 2. 交点在环内

	//交点在环外时  此时 两个入口点必相等
	if (enterNode1 == enterNode2)
	{
		PNode temp = enterNode2->next;//保存一个入口点的下一个结点
		enterNode2->next = NULL;     //将共同的入口点指向空
		crossNode = GetCrossNode(pHead1, pHead2); //然后当做Y型处理求交点
		enterNode2->next = temp;//在连接起来
		return crossNode;
	}
	else//交点在环内  此处注意 考虑 两个完全没有关系的带环链表的处理 
	{
		while (enterNode1 != enterNode2 && sz--)//当一个环走一圈时还没相遇说明根本没有关系
		{
			enterNode1 = enterNode1->next;
		}
		if (enterNode1 == enterNode2)
		{
			return enterNode1;
		}
	}
	return NULL;
}
